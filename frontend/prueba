#pip install clipspy


import clips

# Definir una plantilla de hechos
DEFTEMPLATE_STRING = """
(deftemplate persona
    (slot nombre (type STRING))
    (slot apellido (type STRING))
    (slot fecha_nacimiento (type SYMBOL)))
"""

# Definir una regla
DEFRULE_STRING = """
(defrule saludo
    "Saludar a una nueva persona."
    (persona (nombre ?nombre) (apellido ?apellido))
    =>
    (printout t "Hola " ?nombre " " ?apellido crlf))
"""

# Crear un entorno de CLIPS
environment = clips.Environment()

# Construir las plantillas y reglas en el entorno
environment.build(DEFTEMPLATE_STRING)
environment.build(DEFRULE_STRING)

# Crear un hecho basado en la plantilla
template = environment.find_template('persona')
hecho = template.assert_fact(nombre='Juan', apellido='Pérez', fecha_nacimiento=clips.Symbol('01/01/1980'))

# Ejecutar las reglas
environment.run()

#-----------------
import clips

# Leer el archivo de templates
def read_templates(filename):
    with open(filename, 'r') as file:
        return file.read()

# Crear un entorno de CLIPS
environment = clips.Environment()

# Leer y construir las plantillas y reglas desde un archivo
templates_and_rules = read_templates('ruta/al/archivo.clp')
environment.build(templates_and_rules)

# Crear un hecho basado en la plantilla
template = environment.find_template('persona')
hecho = template.assert_fact(nombre='Juan', apellido='Pérez', fecha_nacimiento=clips.Symbol('01/01/1980'))

# Ejecutar las reglas
environment.run()


###############################
import clips

# Crear un entorno de CLIPS
environment = clips.Environment()

# Leer y construir las plantillas y reglas desde un archivo
templates_and_rules = read_templates('ruta/al/archivo.clp')
environment.build(templates_and_rules)

# Crear un hecho basado en la plantilla
template = environment.find_template('persona')
hecho = template.assert_fact(nombre='Juan', apellido='Pérez', fecha_nacimiento=clips.Symbol('01/01/1980'))

# Ejecutar las reglas
environment.run()

# Leer el hecho
for fact in environment.facts():
    if fact.template.name == 'persona':
        print(f"Nombre: {fact['nombre']}, Apellido: {fact['apellido']}, Fecha de Nacimiento: {fact['fecha_nacimiento']}")



########################
import clips

# Crear un entorno de CLIPS
environment = clips.Environment()

# Leer hechos desde un archivo
with open('ruta/al/archivo_hechos.clp', 'r') as file:
    hechos = file.read()
    environment.load_facts(hechos)

# Ejecutar las reglas (si es necesario)
environment.run()

# Leer y mostrar los hechos
for fact in environment.facts():
    print(f"Nombre: {fact['nombre']}, Apellido: {fact['apellido']}, Fecha de Nacimiento: {fact['fecha_nacimiento']}")


###############################
import clips

# Leer el archivo de plantillas
def read_templates(filename):
    with open(filename, 'r') as file:
        return file.read()

# Crear un entorno de CLIPS
environment = clips.Environment()

# Leer y construir las plantillas desde un archivo
templates = read_templates('ruta/al/archivo_templates.clp')
environment.build(templates)

# Leer y mostrar las plantillas
for template in environment.templates():
    print(f"Template: {template.name}")
    for slot in template.slots:
        print(f"  Slot: {slot.name}, Type: {slot.type}")